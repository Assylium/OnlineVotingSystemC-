@page
@model PRN221_VotingSystem.Pages.DashBoardModel
@{
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSP Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="override.css">
    <link href="bootstrap/bootstrap.min.css" rel="stylesheet" type="text/css"/>
    <script src="bootstrap/bootstrap.min.js" type="text/javascript"></script>
    <script src="bootstrap/jquery.min.js" type="text/javascript"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link href="/resources/css/styleRegister.css" rel="stylesheet" type="text/css"/>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script>

    <style>
        .dashboard {
            display: flex;
            justify-content: space-between;
            background-color: #f1f1f1;
            padding: 20px;
        }

        .dashboard-item {
            display: flex;
            align-items: center;
            flex-basis: 30%;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

            .dashboard-item i {
                font-size: 24px;
                margin-right: 10px;
            }

            .dashboard-item.vote {
                background-color: #ff7675;
                color: #ffffff;
            }

            .dashboard-item.post {
                background-color: #74b9ff;
                color: #ffffff;
            }

            .dashboard-item.comment {
                background-color: #55efc4;
                color: #ffffff;
            }

            .dashboard-item .text-container {
                text-align: left;
            }

            .dashboard-item h3 {
                font-size: 18px;
                margin-bottom: 5px;
            }

            .dashboard-item p {
                font-size: 24px;
                font-weight: bold;
                margin-top: 0;
            }

        #countdown {
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: Arial, sans-serif;
            font-size: 24px;
            color: #333;
        }

        .countdown-item {
            text-align: center;
            margin: 0 10px;
        }

            .countdown-item span {
                display: block;
                font-size: 48px;
                font-weight: bold;
            }

                .countdown-item span:last-child {
                    font-size: 18px;
                    font-weight: normal;
                    margin-top: 5px;
                }

        .chart-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
        }

        .chart-item-pie {
            width: 400px;
            margin: 10px;
        }

        .chart-item-column {
            width: 600px;
            margin: 10px;
        }

        h1 {
            margin-top: 100px;
        }

        body {
            background-color: #f1f1f1;
        }

    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top p-0">
        <a class="navbar-brand bg-primary px-4 py-3" href="#">
            electriq
        </a>

        <button class="navbar-toggler px-4 py-3 border-0" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
            +
        </button>
    </nav>

    <h1>Dash Board</h1>

    <div id="countdown">
        <div class="countdown-item">
            <span id="days">00</span>
            <span>Days</span>
        </div>
        <div class="countdown-item">
            <span id="hours">00</span>
            <span>Hours</span>
        </div>
        <div class="countdown-item">
            <span id="minutes">00</span>
            <span>Minutes</span>
        </div>
        <div class="countdown-item">
            <span id="seconds">00</span>
            <span>Seconds</span>
        </div>
    </div>

    <div class="dashboard">
        <div class="dashboard-item vote">
            <i class="fas fa-users"></i>
            <div class="text-container">
                <h3>Number of voted ballot</h3>
                <p>@Model.VotedBallot</p>
                <h3>Total voters</h3>
                <p>@Model.Voter</p>
            </div>
        </div>
        <div class="dashboard-item post">
            <i class="fas fa-file-alt"></i>
            <div class="text-container">
                <h3>Threads</h3>
                <p>@Model.Threads</p>
            </div>
        </div>
        <div class="dashboard-item comment">
            <i class="fas fa-comments"></i>
            <div class="text-container">
                <h3>Comment</h3>
                <p>@Model.Comments</p>
            </div>
        </div>
    </div>

    <div class="chart-container">
        <div class="row">
            <div class="col-md-8 mb-4">
                <div class="chart-item-column">
                    <canvas id="voteChart" width="600" height="300"></canvas>
                </div>
            </div>
            <!-- Add other chart items here -->
        </div>
    </div>

    @*<h1>Data from Servlet</h1>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Data</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Data != null && Model.Data.Any())
            {
                foreach (var number in Model.Data)
                {
                    <tr>
                        <td>@number</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td>No data available.</td>
                </tr>
            }
        </tbody>
    </table>*@

    <script>
        //time count down
        function countdown() {
            const endDate = new Date("@Model.EndTime"); // Sử dụng Model.EndTime ở đây
            const now = new Date();
            const difference = endDate - now;

            const timeDiff = endDate - now;

            if (timeDiff <= 0) {
                // Cuộc đếm ngược đã kết thúc
                document.getElementById("countdown").innerHTML = "Campaign has ended!";
                return;
            }

            const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);

            document.getElementById("days").textContent = padNumber(days);
            document.getElementById("hours").textContent = padNumber(hours);
            document.getElementById("minutes").textContent = padNumber(minutes);
            document.getElementById("seconds").textContent = padNumber(seconds);

            setTimeout(countdown, 1000);
        }

        function padNumber(number) {
            return number.toString().padStart(2, "0");
        }

        countdown();

       
        document.addEventListener("DOMContentLoaded", function () {
            var startTime = new Date().getTime();
            var interval = 120 * 1000; // 1 phút
            var maxColumns = 24;
            var columnsData = [];

            // Kiểm tra xem dữ liệu đã lưu trong localStorage chưa
            var savedData = localStorage.getItem("chartData");
            if (savedData) {
                columnsData = JSON.parse(savedData);
            }

            createChart();

            function createChart() {
                var ctx = document.getElementById('voteChart').getContext('2d');
                var voteChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: [], // Các nhãn của cột (rỗng ban đầu)
                        datasets: [{
                            label: 'Số người vote',
                            data: [], // Dữ liệu số người vote (rỗng ban đầu)
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'NumberOfVotedBallot'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Hours'
                                }
                            }
                        }
                    }
                });

                function updateChart() {
                    var currentTime = new Date().getTime();
                    var elapsedTime = currentTime - startTime;

                    var columns = Math.floor(elapsedTime / interval); // Số cột đã trôi qua

                    var labels = voteChart.data.labels;
                    var data = voteChart.data.datasets[0].data;

                    if (columns >= maxColumns) {
                        // Cột mới sẽ đẩy cột cũ đi
                        labels.shift();
                        data.shift();
                        columnsData.shift();
                    }

                    // Thêm cột mới và nhãn tương ứng
                    var newColumnLabel = (columns) + ":00";
                    labels.push(newColumnLabel);
                    data.push(columns);
                    columnsData.push(columns);

                    // Cập nhật biểu đồ
                    voteChart.update();

                    // Lưu trữ dữ liệu vào localStorage
                    localStorage.setItem("chartData", JSON.stringify(columnsData));
                }

                // Gọi hàm cập nhật sau mỗi 1 giây
                setInterval(updateChart, interval);

                // Sử dụng dữ liệu từ jsonData
                var jsonData = @Html.Raw(ViewData["JsonData"]);
                var voterData = jsonData.Voter;
                var votedBallotData = jsonData.VotedBallot;

                // Tạo biểu đồ với dữ liệu từ jsonData
                if (voterData && votedBallotData) {
                    for (var i = 0; i < voterData.length; i++) {
                        voteChart.data.labels.push(voterData[i]);
                        voteChart.data.datasets[0].data.push(votedBallotData[i]);
                    }

                    // Cập nhật biểu đồ
                    voteChart.update();
                }
            }
        });



    </script>
</body>
</html>
