   @page
@model PRN221_VotingSystem.Pages.DetailModel
@{
}
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
              integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
        <link rel="stylesheet" href="override.css">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
        <link href="css/ChoiceList.css" rel="stylesheet" type="text/css"/>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="path/to/your/javascript/file.js"></script>

        <style>
            .input-row {
                display: flex;
                flex-wrap: wrap;
                margin-top: 50px;
                margin-left: 30px;
            }

            .input-wrapper {
                margin-bottom: 20px;
                margin-right: 10px;
            }

            table {
                border-collapse: collapse;
                width: 100%;
            }

            th, td {
                border: 1px solid black;
                padding: 8px;
                text-align: left;
            }

            th {
                background-color: #4CAF50;
                color: white;
            }

            tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            #votersTable {
                width: 100%; /* Chiều rộng tổng thể của bảng */
            }

            th:first-child,
            td:first-child {
                width: 10%; /* Chiều rộng cột số thứ tự */
            }

            th:nth-child(2),
            td:nth-child(2) {
                width: 90%; /* Chiều rộng cột email */
            }

        </style>
    </head>
    <body>
        <div>
            <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top p-0">
                <a class="navbar-brand bg-primary px-4 py-3" href="#">
                    electriq
                </a>

                <button class="navbar-toggler px-4 py-3 border-0" type="button" data-bs-toggle="collapse"
                        data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                        aria-label="Toggle navigation">
                    +
                </button>
            </nav>
        </div>



        <div class="content">
            <div class="breadcrumb1">
                <div class="contentbread">
                    <!--<nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='%236c757d'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">-->
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item active" aria-current="page">Set up</li>
                        <li class="breadcrumb-item"><a href="#">Details</a></li>                       
                        <li class="breadcrumb-item active" aria-current="page">Review</li>
                    </ol>
                    </nav>
                </div>


            </div>
        <div class="gray-div flex-container">
            <div class="gray-div-content">
                <div class="container">
                    <div class="row">
                        <div class="col-12 col-md-4">
                            <div class="option-add">
                                <form method="post" enctype="multipart/form-data">
                                    <h3>Candidates</h3>
                                    <label for="candidateName">Name</label>
                                    <input type="text" id="candidateName" name="name" class="form-control mb-3" required />
                                    <div class="option-infor">
                                        <label class="label-detail" for="file-input">Upload Image</label>
                                        <input accept="image/*" type="file" id="file-input" name="image" onchange="previewImage(event)" class="form-control mb-3" />
                                        <img class="avatar" id="img-preview" src="img/avatar.jpg" width="400" height="500" />
                                        <p class="mb-3">PNG or JPG</p>
                                        <label for="candidateDescription">Description</label>
                                        <textarea id="candidateDescription" name="description" class="form-control" rows="4" required></textarea>
                                    </div>
                                    <div class="container mt-3">
                                        <div id="inputContainer"></div>
                                        <input type="submit" name="action" value="Add" class="btn btn-primary" />
                                    </div>
                                </form>
                            </div>
                        </div>
                        <div class="col-12 col-md-8">
                            <div class="input-row">
                                @if (Model.votelist != null)
                                {
                                    @foreach (var vote in Model.votelist)
                                    {
                                        <div class="input-wrapper mb-3">
                                            <input type="text" class="form-control short-input" value="@vote.VotingObjectName" disabled />
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.Security == 2)
            {
                <div class="gray-div-content">
                    <h3>Voters</h3>
                    <div class="mb-3">
                        <input type="file" id="fileInput" class="form-control mb-3">
                        <button onclick="importExcel()" class="btn btn-primary mb-3">Import</button>
                    </div>
                    <div class="mb-3">
                        <input type="number" id="rowNumberInput" placeholder="Enter number of rows" class="form-control mb-3">
                        <button onclick="createTable()" class="btn btn-primary mb-3">Create</button>
                    </div>
                    <table id="votersTable" class="table">
                        <thead>
                            <tr>
                                <th scope="col">Số thứ tự</th>
                                <th scope="col">Email</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Table body content here -->
                        </tbody>
                    </table>
                    <button onclick="validateList()" class="btn btn-primary mb-3">Validate List</button>
                    <button id="myButton" disabled onclick="sendEmail()" class="btn btn-primary mb-3">Invite</button>
                    <div id="inviteSuccess" style="color: green;"></div>
                </div>
            }
                
        </div>
        <form method="post"  class="gray-div flex-container">
            <div class="gray-div-content">
                <div class="mb-3">
                    <label for="exampleFormControlTextarea1" class="form-label" style="font-weight: bold">Question</label>
                    <textarea class="form-control question" id="exampleFormControlTextarea1" rows="3" name="Question"></textarea>
                </div>
                <input type="submit" class="btn btn-primary" name="action" value="Review" />
            </div>
        </form>
        </div>
    </div>
    <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
    <script>

// Function to preview the uploaded image
                            function previewImage(event) {
                                var input = event.target;
                                var file = input.files[0];
                                var imgPreview = input.parentNode.querySelector(".avatar");

                                if (file) {
                                    var reader = new FileReader();
                                    reader.onload = function () {
                                        imgPreview.src = reader.result;
                                    };
                                    reader.readAsDataURL(file);
                                } else {
                                    // Nếu không có tệp tin ảnh được chọn, đặt ảnh mặc định
                                    imgPreview.src = 'images/avatar.jpg';
                                }
                            }


                            $(document).ready(function () {
                                $('#form-add').submit(function (event) {
                                    event.preventDefault(); // Ngăn chặn việc gửi yêu cầu POST mặc định

                                    var formData = new FormData(this); // Tạo đối tượng FormData từ form

                                    $.ajax({
                                        url: '/OnlineVotingSystem/choicelist', // Lấy đường dẫn action từ thuộc tính action của form
                                        type: "POST", // Lấy phương thức method từ thuộc tính method của form
                                        data: formData,
                                        processData: false,
                                        contentType: false,
                                        success: function (response) {
                                            // Hiển thị thông báo thành công bằng SweetAlert
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Success',
                                                text: 'Add successful!',
                                                showConfirmButton: false,
                                                timer: 1500
                                            }).then(function () {
                                                // Tải lại trang
                                                location.reload();
                                            });
                                        },
                                        error: function (xhr, status, error) {
                                            // Xử lý lỗi (nếu có)
                                        }
                                    });
                                });
                            });

                            function updateLink(votingObjectId) {
                                var url = 'choicelist';
                                url += '?did=' + votingObjectId;
                                window.location.href = url;
                            }


                            function deleteQuestion(questionId) {
                                if (confirm('Bạn có chắc chắn muốn xóa câu hỏi này không?')) {
                                    var xhr = new XMLHttpRequest();
                                    xhr.onreadystatechange = function () {
                                        if (xhr.readyState === 4) {
                                            if (xhr.status === 200) {
                                                // Hiển thị SweetAlert thông báo thành công
                                                Swal.fire('Thành công', 'Câu hỏi đã được xóa', 'success').then(function () {
                                                    // Tải lại trang
                                                    location.reload();
                                                });
                                                // Cập nhật giao diện ngay tại đây nếu cần thiết
                                            } else {
                                                // Xử lý lỗi nếu cần thiết
                                            }
                                        }
                                    };
                                    xhr.open('GET', 'deleteoption?voId=' + questionId, true);
                                    xhr.send();
                                }
                            }

                            function importExcel() {
                                const fileInput = document.getElementById("fileInput");
                                const file = fileInput.files[0];

                                if (file) {
                                    const reader = new FileReader();

                                    reader.onload = function (e) {
                                        const data = new Uint8Array(e.target.result);
                                        const workbook = XLSX.read(data, {type: "array"});
                                        const worksheet = workbook.Sheets[workbook.SheetNames[0]];
                                        const jsonData = XLSX.utils.sheet_to_json(worksheet, {header: 1});

                                        const table = document.getElementById("votersTable");

                                        // Xóa dữ liệu hiện tại trong bảng
                                        while (table.rows.length > 1) {
                                            table.deleteRow(1);
                                        }

                                        for (let i = 0; i < jsonData.length; i++) {
                                            const row = table.insertRow();
                                            const cell1 = row.insertCell(0);
                                            const cell2 = row.insertCell(1);

                                            cell1.innerHTML = i;
                                            cell2.contentEditable = true;

                                            const emailValue = jsonData[i][0];
                                            cell2.innerHTML = emailValue ? emailValue : "";
                                        }
                                    };

                                    reader.readAsArrayBuffer(file);
                                }
                            }

                            function createTable() {
                                const rowNumberInput = document.getElementById("rowNumberInput");
                                const numRows = parseInt(rowNumberInput.value);

                                if (!isNaN(numRows) && numRows >= 0) {
                                    const table = document.getElementById("votersTable");
                                    const currentRowCount = table.rows.length - 1;

                                    if (numRows > currentRowCount) {
                                        // Thêm hàng mới
                                        for (let i = currentRowCount + 1; i <= numRows; i++) {
                                            const row = table.insertRow();
                                            const cell1 = row.insertCell(0);
                                            const cell2 = row.insertCell(1);

                                            cell1.innerHTML = i;
                                            cell2.contentEditable = true;
                                        }
                                    } else if (numRows < currentRowCount) {
                                        // Xóa hàng thừa
                                        while (table.rows.length - 1 > numRows) {
                                            table.deleteRow(table.rows.length - 1);
                                        }
                                    }
                                } else {
                                    alert("Please enter a valid number of rows.");
                                }
                            }

                            function validateList() {
                                const table = document.getElementById("votersTable");
                                const emailList = [];

                                for (let i = 1; i < table.rows.length; i++) {
                                    const emailCell = table.rows[i].cells[1];
                                    const email = emailCell.innerHTML.trim();

                                    if (email !== "") {
                                        emailList.push(email);
                                    }
                                }

                                if (emailList.length > 0) {
                                    $.ajax({
                                        type: "POST",
                                        url: '/OnlineVotingSystem/validatevoters',
                                        data: JSON.stringify(emailList),
                                        contentType: "application/json",
                                        success: function (response) {
                                            console.log("Validation successful");
                                            if (response !== null) {
                                                alert("OK");
                                                document.getElementById("myButton").disabled = false;
                                                
                                            } else {
                                                alert("Email invalid");
                                                document.getElementById("myButton").disabled = true;
                                            }
                                        },
                                        error: function (xhr, status, error) {
                                            console.log("Validation failed: " + error);

                                        }
                                    });
                                } else {
                                    alert("No emails to validate.");
                                }
                            }

                            function sendEmail() {
                                var xhr = new XMLHttpRequest();
                                xhr.open("GET", "addvoter", true);
                                xhr.send();
                                var inviteSuccessElement = document.getElementById("inviteSuccess");
                                inviteSuccessElement.innerText = "Invite success";
                            }

    </script>
</body>
</html>
